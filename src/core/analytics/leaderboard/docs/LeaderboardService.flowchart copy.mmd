flowchart TD
    A([🚀 Start LeaderboardService]):::entry --> B{{🏷️ Extract leaderboard tag<br/>from scan_strategy_tag}}:::step
    B --> C{{📦 Initialize leaderboard store<br/>if missing}}:::storage
    C --> D[🔁 Iterate over normalized snapshots<br/>for each ticker]:::loop

    D --> E0{{✅ Validate snapshot #40;Sanity checks#41;}}:::branch
    E0 -- Invalid --> E5([🛑 Skip invalid snapshot]):::exit
    E0 -- Valid --> E1[💾 Store new snapshot<br/><i>storeSnapshot</i>]:::storage
    E1 --> E2[📚 Fetch recent history<br/><i>retrieveRecentSnapshots</i>]:::async
    E2 --> E3{{📊 <b>Enough history for ticker?</b>}}:::branch
    E3 -- No --> E4([🚫 Skip ticker<br/>not enough data]):::exit

    E3 -- Yes --> F1[🧠 Compute kinetics<br/>velocity, acceleration]:::compute
    F1 --> F2[🆕 Create leaderboard entry<br/>init appearance count to 1]:::step
    F2 --> F3[🗂️ Add to batch map<br/>in-memory leaderboard map]:::step

    F3 --> M1[📥 Retrieve previous leaderboard<br/><i>retreiveLeaderboard</i>]:::async
    M1 --> M2A{{🆕 Is leaderboard empty?}}:::branch
    M2A -- Yes --> M3[⚙️ Set appearance count = 1<br/>for new tickers]:::step
    M2A -- No --> M2{{🔀 Merging with previous entries?}}:::branch

    M2 -- No --> M3
    M2 -- Yes --> M4[♻️ Update appearance counts<br/>increment for persistent/retained]:::step
    M4 --> M5[📌 Retain missing tickers<br/>from previous leaderboard]:::step
    M5 --> M6[✅ Finalize appearance counts<br/>set to 1 if unseen]:::step

    M3 --> S1
    M6 --> S1

    S1[📈 Compute momentum score<br/>velocity × appearance + acceleration]:::compute
    S1 --> S2[💥 Add POP bonus if new<br/>score += popBonus]:::step
    S2 --> S3[📉 Apply decay score *= decayFactor ^ n-1]:::step

    S3 --> R1[🧮 Sort by scores - DESC order]:::compute
    R1 --> R2[🏅 Assign ranks<br/>rank = index + 1]:::compute
    R2 --> R3([📤 Return ranked leaderboard]):::exit
    R3 --> H[💾 Persist leaderboard]:::storage
    H --> Z([✅ Done]):::exit

    %% Styles
    classDef step fill:#e6ffcc,stroke:#008000,stroke-width:2px;
    classDef entry fill:#fffbe6,stroke:#ffb300,stroke-width:2px;
    classDef exit fill:#f5f5f5,stroke:#222,stroke-width:2px;
    classDef error fill:#fff0f0,stroke:#d00,stroke-width:2px;
    classDef compute fill:#e0f7fa,stroke:#006064,stroke-width:2px;
    classDef storage fill:#ffe6e6,stroke:#cc0000,stroke-width:2px;
    classDef loop fill:#f0f0f0,stroke:#888,stroke-dasharray: 5, 5;
    classDef async fill:#fffbe6,stroke:#ff9900,stroke-width:2px;
    classDef branch fill:#ffffff,stroke:#999999,stroke-dasharray: 3, 3;
