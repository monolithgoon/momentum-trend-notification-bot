graph TD
  Start["🏁 <b>runLiveMarketScannerTask()</b><br/><i>Entrypoint</i>"]:::entry --> A

  A(["🔄 <b>Start</b>"]):::entry --> B{{📅 <b>Get Current Market Session</b><br/><i>core/utils</i>}}:::step
  B --> C{{🧠 <b>Define Scan Strategy Keys</b><br/><i>scanScreenerConfigTypes</i>}}:::step
  C --> D["🔍 <b>Scan Market Tickers</b><br/><i>MarketQuoteScanner (async)</i>"]:::async
  D -->|❌ If error| E1(["🚨 <b>Log error</b><br/>End"]):::error
  D --> E{{🧪 <b>Any Active Tickers?</b>}}:::branch

  E -- No --> F(["📭 <b>No active tickers found</b><br/>End"]):::exit
  E -- Yes --> G["📣 <b>Notify Scan Result</b><br/><i>NotifierService + Telegram (async)</i>"]:::external
  G --> H["🧪 <b>Generate & Sort Snapshots</b><br/><i>generateMockSnapshots + GenericSorter</i>"]:::test
  H --> I["🏷️ <b>Compose Leaderboard Tag</b><br/><i>composeScanStrategyTag</i>"]:::step
  I --> J["🏷️ <b>Tag Scan Results</b><br/><i>addTagsToMarketScanResult</i>"]:::step
  J --> K["🏆 <b>Process Leaderboard</b><br/><i>FileLeaderboardStorage + LeaderboardService (async)</i>"]:::step

  K --> Q{{🌐 <b>Enable WebSocket?</b>}}:::branch
  Q -- No --> M(["✅ <b>End</b>"]):::exit
  Q -- Yes --> L["📡 <b>Setup WebSocket Client</b><br/><i>EODHDWebSocketClient</i>"]:::optional --> M

  %% Styles
  classDef step fill:#e6ffcc,stroke:#008000,stroke-width:2px;
  classDef entry fill:#fffbe6,stroke:#ffb300,stroke-width:2px;
  classDef exit fill:#f5f5f5,stroke:#222,stroke-width:2px;
  classDef error fill:#fff0f0,stroke:#d00,stroke-width:2px;
  classDef test fill:#e0e0ff,stroke:#8888ff,stroke-width:2px;
  classDef optional fill:#f0f0f0,stroke-dasharray: 5, 5;
  classDef external fill:#e6eeff,stroke:#0055cc,stroke-width:2px;
  classDef branch fill:#fff,stroke:#888,stroke-width:2px;
  classDef async fill:#fffbe6,stroke:#ffb300,stroke-width:2px;
